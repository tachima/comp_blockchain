/*
  bitcoin
*/

maxblk = 5

place RootA1
place RootA2
place RootB1
place RootB2
place RootC1
place RootC2

place PblkAB
place PconfirmAB

place PblkAC
place PconfirmAC

place PblkBA
place PconfirmBA

place PblkBC
place PconfirmBC

place PblkCA
place PconfirmCA

place PblkCB
place PconfirmCB


place PblkAB2
place PconfirmAB2

place PblkAC2
place PconfirmAC2

place PblkBA2
place PconfirmBA2

place PblkBC2
place PconfirmBC2

place PblkCA2
place PconfirmCA2

place PblkCB2
place PconfirmCB2

exp TminingA (rate = mu1, guard = #PblkAB + #PconfirmAB < maxblk)
exp TminingB (rate = mu2, guard = #PblkBA + #PconfirmBA < maxblk)
exp TminingC (rate = mu2, guard = #PblkBC + #PconfirmBC < maxblk)
exp TnotifAB (rate = lambda1 * #PblkAB)
exp TnotifAC (rate = lambda1 * #PblkAC)
exp TnotifBA (rate = lambda2 * #PblkBA)
exp TnotifBC (rate = lambda2 * #PblkBC)
exp TnotifCA (rate = lambda3 * #PblkCA)
exp TnotifCB (rate = lambda3 * #PblkCB)

exp TminingA2 (rate = mu1, guard = #PblkAB + #PconfirmAB < maxblk)
exp TminingB2 (rate = mu2, guard = #PblkBA + #PconfirmBA < maxblk)
exp TminingC2 (rate = mu2, guard = #PblkBC + #PconfirmBC < maxblk)
exp TnotifAB2 (rate = lambda1 * #PblkAB)
exp TnotifAC2 (rate = lambda1 * #PblkAC)
exp TnotifBA2 (rate = lambda2 * #PblkBA)
exp TnotifBC2 (rate = lambda2 * #PblkBC)
exp TnotifCA2 (rate = lambda3 * #PblkCA)
exp TnotifCB2 (rate = lambda3 * #PblkCB)

imm SwitchA1 (guard = glooseAB || glooseAC){
    #PblkAB = 0
    #PconfirmAB = 0
    #PblkAC = 0
    #PconfirmAC = 0    
}
imm SwitchA2 (guard = glooseAB || glooseAC){
    #PblkAB2 = 0
    #PconfirmAB2 = 0
    #PblkAC2 = 0
    #PconfirmAC2 = 0    
}
imm SwitchB1 (guard = glooseBA || glooseBC){
    #PblkBA = 0
    #PconfirmBA = 0
    #PblkBC = 0
    #PconfirmBC = 0    
}
imm SwitchB2 (guard = glooseBA || glooseBC){
    #PblkBA2 = 0
    #PconfirmBA2 = 0
    #PblkBC2 = 0
    #PconfirmBC2 = 0    
}
imm SwitchC1 (guard = glooseCA || glooseCB){
    #PblkCA = 0
    #PconfirmCA = 0
    #PblkCB = 0
    #PconfirmCB = 0    
}
imm SwitchC2 (guard = glooseCA || glooseCB){
    #PblkCA2 = 0
    #PconfirmCA2 = 0
    #PblkCB2 = 0
    #PconfirmCB2 = 0    
}

arc RootA1 to SwitchA1
arc SwitchA1 to RootA2
arc RootA2 to SwitchA2
arc SwitchA2 to RootA1

arc RootB1 to SwitchB1
arc SwitchB1 to RootB2
arc RootB2 to SwitchB2
arc SwitchB2 to RootB1

arc RootC1 to SwitchC1
arc SwitchC1 to RootC2
arc RootC2 to SwitchC2
arc SwitchC2 to RootC1

arc TminingA to RootA1
arc TminingA2 to RootA2
arc TminingB to RootB1
arc TminingB2 to RootB2
arc TminingC to RootC1
arc TminingC2 to RootC2

arc RootA1 to TminingA
arc RootA2 to TminingA2
arc RootB1 to TminingB
arc RootB2 to TminingB2
arc RootC1 to TminingC
arc RootC2 to TminingC2

arc TminingA to PblkAB
arc PblkAB to TnotifAB
arc TnotifAB to PconfirmAB

arc TminingA to PblkAC
arc PblkAC to TnotifAC
arc TnotifAC to PconfirmAC

arc TminingB to PblkBA
arc PblkBA to TnotifBA
arc TnotifBA to PconfirmBA

arc TminingB to PblkBC
arc PblkBC to TnotifBC
arc TnotifBC to PconfirmBC

arc TminingC to PblkCA
arc PblkCA to TnotifCA
arc TnotifCA to PconfirmCA

arc TminingC to PblkCB
arc PblkCB to TnotifCB
arc TnotifCB to PconfirmCB


arc TminingA2 to PblkAB2
arc PblkAB2 to TnotifAB2
arc TnotifAB2 to PconfirmAB2

arc TminingA2 to PblkAC2
arc PblkAC2 to TnotifAC2
arc TnotifAC2 to PconfirmAC2

arc TminingB2 to PblkBA2
arc PblkBA2 to TnotifBA2
arc TnotifBA2 to PconfirmBA2

arc TminingB2 to PblkBC2
arc PblkBC2 to TnotifBC2
arc TnotifBC2 to PconfirmBC2

arc TminingC2 to PblkCA2
arc PblkCA2 to TnotifCA2
arc TnotifCA2 to PconfirmCA2

arc TminingC2 to PblkCB2
arc PblkCB2 to TnotifCB2
arc TnotifCB2 to PconfirmCB2

place Pclear (init = 1)

imm TlooseAB (guard = glooseAB) {
  #PblkAB = 0;
  #PconfirmAB = 0;
  #PconfirmAC = #PconfirmBA;
  #PconfirmBA = 0;
}

imm TlooseAC (guard = glooseAC) {
  #PblkAC = 0;
  #PconfirmAC = 0;
  #PconfirmAB = #PconfirmCA;
  #PconfirmCA = 0;
}

imm TlooseBA (guard = glooseBA) {
  #PblkBA = 0;
  #PconfirmBA = 0;
  #PconfirmBC = #PconfirmAB;
  #PconfirmAB = 0;
}

imm TlooseBC (guard = glooseBC) {
  #PblkBC = 0;
  #PconfirmBC = 0;
  #PconfirmBA = #PconfirmCB;
  #PconfirmCB = 0;
}

imm TlooseCA (guard = glooseCA) {
  #PblkCA = 0;
  #PconfirmCA = 0;
  #PconfirmCB = #PconfirmAC;
  #PconfirmAC = 0;
}

imm TlooseCB (guard = glooseCB) {
  #PblkCB = 0;
  #PconfirmCB = 0;
  #PconfirmCA = #PconfirmBC;
  #PconfirmBC = 0;
}

arc Pclear to TlooseAB
arc Pclear to TlooseAC
arc Pclear to TlooseBA
arc Pclear to TlooseBC
arc Pclear to TlooseCA
arc Pclear to TlooseCB
arc TlooseAB to Pclear
arc TlooseAC to Pclear
arc TlooseBA to Pclear
arc TlooseBC to Pclear
arc TlooseCA to Pclear
arc TlooseCB to Pclear

glooseAtoB = #PconfirmBA > #PblkAB + #PconfirmAB || #PconfirmBA2 > #PblkAB2 + #PconfirmAB2
glooseAtoC = #PconfirmCA > #PblkAC + #PconfirmAC || #PconfirmCA2 > #PblkAC2 + #PconfirmAC2
glooseBtoA = #PconfirmAB > #PblkBA + #PconfirmBA || #PconfirmAB2 > #PblkBA2 + #PconfirmBA2
glooseBtoC = #PconfirmCB > #PblkBC + #PconfirmBC || #PconfirmCB2 > #PblkBC2 + #PconfirmBC2
glooseCtoA = #PconfirmAC > #PblkCA + #PconfirmCA || #PconfirmAC2 > #PblkCA2 + #PconfirmCA2
glooseCtoB = #PconfirmBC > #PblkCB + #PconfirmCB || #PconfirmBC2 > #PblkCB2 + #PconfirmCB2


mu1 = 1/5
mu2 = 1/10
mu3 = 1/10
lambda1 = 1/1
lambda2 = 1/0.1
lambda3 = 1/0.1

reward A #PblkA + #PconfirmA
reward B #PblkB + #PconfirmB
reward C #PblkC + #PconfirmC
reward winAB ifelse(?TlooseAB, 0, 1)
reward winAC ifelse(?TlooseAC, 0, 1)
reward winBA ifelse(?TlooseBA, 0, 1)
reward winBC ifelse(?TlooseBC, 0, 1)
reward winCA ifelse(?TlooseCA, 0, 1)
reward winCB ifelse(?TlooseCB, 0, 1)

reward rwd1 #PblkA + #PconfirmA
reward rwd2 #PblkB + #PconfirmB
reward rwd3 #PblkA

